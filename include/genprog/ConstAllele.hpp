/*\***********************************************************************\*//**
 * MODULE: ConstAllele.hpp
 *
 * @author Dennis Drown
 * @date   19 Aug 2011
 *
 * @copyright 2011-2016 Dennis Drown and Ostrich Ideas
 *//**********************************************************************\*///
#ifndef CONSTALLELE_HPP
#define	CONSTALLELE_HPP

#include <new>
#include <sstream>

#include "genprog/Allele.hpp"

namespace oi { namespace genprog {


/*/- -=- -=- -=- -=- -=- -=- -=- -=- -=- -=- -=- -=- -=- -=- -=- -=- -=- **\*/
// ⡎⠑ ⢀⡀ ⣀⡀ ⢀⣀ ⣰⡀ ⣎⣱ ⡇ ⡇ ⢀⡀ ⡇ ⢀⡀
// ⠣⠔ ⠣⠜ ⠇⠸ ⠭⠕ ⠘⠤ ⠇⠸ ⠣ ⠣ ⠣⠭ ⠣ ⠣⠭
/*/- -=- -=- -=- -=- -=- -=- -=- -=- -=- -=- -=- -=- -=- -=- -=- -=- -=- *//**
 * A node in a genetic program tree which represents a constant argument to
 * a function.
 *///-------------------------------------------------------------------------
class ConstAllele : public Allele
{
public:
    /**
     * Creates a ConstAllele
     *
     * @param val   The value this constant allele will represent
     *///--------------------------------------------------------------------
    ConstAllele(Real val = 0.0)
    : Value(val)
    { }


    /**
     * Copy constructor for the ConstAllele
     *
     * @param that  The object we're creating a copy of
     *///--------------------------------------------------------------------
    ConstAllele(const ConstAllele& that)
    : Value(that.Value)
    { }

#if defined(MEMPOOLS)
    static void * operator new(size_t size);
    static void   operator delete(void *p, size_t size);
#endif

    /**
     * Factory function to generate "sliding" random constants alleles
     *
     * @note    Any object generated by this function must be deallocated when
     *          no longer needed with the normal C++ delete.
     *
     * @param   world   The problem space for which we are generating an allele
     *
     *
     * @return  A newly allocated ConstAllele object
     *///--------------------------------------------------------------------
    static Allele * newAllele(const World& world)
    {
        return new ConstAllele(getSlidingReal());
    }


#if ENABLE_CUDA
    /**
     * Gets the Allele code associated with the (derived) Allele object.
     *
     * @return  The enum code for the (child) Allele type
     *///--------------------------------------------------------------------
    Type getType() const noexcept override
    {
        return Allele::Const;
    }


    /**
     * Returns the value of the constant allele
     *
     * @param win       Attribute window (unused in ConstAlleles)
     * @param flatGend  GPGPU (cuda) chromosome representation
     *
     * @return      The allele's real number value
     *///--------------------------------------------------------------------
    Real getValue(const AttrWindow& win, FlatGene& flatGene) const override
    {
        return getValue(win);
    }
#endif


    /**
     * Returns the value of the constant allele
     *
     * @param win   Attribute window (unused in ConstAlleles)
     *
     * @return      The allele's real number value
     *///--------------------------------------------------------------------
    Real getValue(const AttrWindow& win) const override
    {
        return Value;
    }


    /**
     * String representation of the Allele
     *
     * @return      The node count for this Allele
     *///--------------------------------------------------------------------
    const std::string toString() const override
    {
        std::stringstream ss;

        ss << Value;
        return ss.str();
    }


    /**
     * Returns the newly allocated copy of this Allele. The returned object
     * must be deleted by the caller once it is no longer needed.
     *
     * @return      A new copy of this Allele
     *///--------------------------------------------------------------------
    Allele *newCopy() const override
    {
        return new ConstAllele(*this);
    }

    friend std::ostream& operator <<(std::ostream& out, const ConstAllele& allele);


private:
    ConstAllele & operator=(const ConstAllele& rhs);    ///< DISABLED!
    static Real getSlidingReal();

    const Real Value;

};


} } // ns{ oi::genprog }

#endif	/* CONSTALLELE_HPP */

